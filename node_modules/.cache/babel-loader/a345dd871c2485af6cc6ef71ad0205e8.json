{"ast":null,"code":"import _classCallCheck from \"/Users/loringmuller/Desktop/UCLA-Class-Homework/Clicky-Game/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/loringmuller/Desktop/UCLA-Class-Homework/Clicky-Game/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/loringmuller/Desktop/UCLA-Class-Homework/Clicky-Game/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/loringmuller/Desktop/UCLA-Class-Homework/Clicky-Game/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/loringmuller/Desktop/UCLA-Class-Homework/Clicky-Game/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/loringmuller/Desktop/UCLA-Class-Homework/Clicky-Game/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/loringmuller/Desktop/UCLA-Class-Homework/Clicky-Game/src/components/ClickyGame.js\";\nimport React, { Component } from 'react';\nimport Navbar from './Navbar';\nimport Container from './Container';\nimport Footer from './Footer';\nimport Banner from './Header';\nimport images from '../images';\n\nvar ClickyGame =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ClickyGame, _Component);\n\n  function ClickyGame() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ClickyGame);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ClickyGame)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      score: 0,\n      highScore: 0,\n      navMsgColor: '',\n      navMessage: 'Click an image to begin!',\n      allBeatles: _this.shuffleArray(),\n      wasClicked: [],\n      shake: false\n    };\n    _this.clickEvent = _this.checkClicked.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(ClickyGame, [{\n    key: \"shuffleArray\",\n    // used to shuffle the array of images when the DOM loads, and when an image is clicked\n    value: function shuffleArray() {\n      // creates a copy of the current characters array to modify it by value, and not by reference\n      var newArr = images.slice(); // will store the shuffled array\n\n      var shuffleArr = [];\n\n      while (newArr.length > 0) {\n        shuffleArr.push(newArr.splice(Math.floor(Math.random() * newArr.length), 1)[0]);\n      }\n\n      return shuffleArr;\n    }\n  }, {\n    key: \"checkClicked\",\n    value: function checkClicked(clickedElem) {\n      var _this2 = this;\n\n      var prevState = this.state.wasClicked.slice(); // shuffles the images\n\n      var shuffled = this.shuffleArray(); // tracks score\n\n      var score = this.state.score;\n      var highScore = this.state.highScore;\n\n      if (!this.state.wasClicked.includes(clickedElem)) {\n        // if score and highScore are the same, then there is a new highScore value\n        if (score === highScore) {\n          score++;\n          highScore++; // if they are not equal, then only increase the score value\n        } else {\n          score++;\n        } // adds the clicked item to wasClicked to track that it has been clicked\n\n\n        prevState.push(clickedElem);\n      } // resets the current score if the same element was clicked twice\n\n\n      if (this.state.wasClicked.includes(clickedElem)) {\n        var _score = 0;\n        return this.setState({\n          score: _score,\n          highScore: highScore,\n          navMsgColor: 'incorrect',\n          navMessage: 'Incorrect guess!',\n          allBeatles: shuffled,\n          wasClicked: [],\n          shake: true\n        });\n      }\n\n      this.setState({\n        score: score,\n        highScore: highScore,\n        navMsgColor: 'correct',\n        navMessage: 'You Guessed Correctly!',\n        allBeatles: shuffled,\n        wasClicked: prevState,\n        shake: false\n      });\n      return setTimeout(function () {\n        return _this2.setState({\n          navMsgColor: ''\n        });\n      }, 500);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var state = this.state;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        score: state.score,\n        highScore: state.highScore,\n        navMessage: state.navMessage,\n        navMsgColor: state.navMsgColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }), React.createElement(Banner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }), React.createElement(Container, {\n        shake: state.shake,\n        beatles: state.allBeatles,\n        clickEvent: this.clickEvent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }), React.createElement(Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ClickyGame;\n}(Component);\n\nexport default ClickyGame;","map":{"version":3,"sources":["/Users/loringmuller/Desktop/UCLA-Class-Homework/Clicky-Game/src/components/ClickyGame.js"],"names":["React","Component","Navbar","Container","Footer","Banner","images","ClickyGame","state","score","highScore","navMsgColor","navMessage","allBeatles","shuffleArray","wasClicked","shake","clickEvent","checkClicked","bind","newArr","slice","shuffleArr","length","push","splice","Math","floor","random","clickedElem","prevState","shuffled","includes","setState","setTimeout"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,WAAnB;;IAEMC,U;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,KAAK,EAAE,CADD;AAENC,MAAAA,SAAS,EAAE,CAFL;AAINC,MAAAA,WAAW,EAAE,EAJP;AAKNC,MAAAA,UAAU,EAAE,0BALN;AAMNC,MAAAA,UAAU,EAAE,MAAKC,YAAL,EANN;AAONC,MAAAA,UAAU,EAAE,EAPN;AAQNC,MAAAA,KAAK,EAAE;AARD,K;UAWRC,U,GAAa,MAAKC,YAAL,CAAkBC,IAAlB,uD;;;;;;AAEb;mCACe;AACb;AACA,UAAMC,MAAM,GAAGd,MAAM,CAACe,KAAP,EAAf,CAFa,CAIb;;AACA,UAAMC,UAAU,GAAG,EAAnB;;AAEA,aAAOF,MAAM,CAACG,MAAP,GAAgB,CAAvB,EAA0B;AACxBD,QAAAA,UAAU,CAACE,IAAX,CAAgBJ,MAAM,CAACK,MAAP,CAAcC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBR,MAAM,CAACG,MAAlC,CAAd,EAAyD,CAAzD,EAA4D,CAA5D,CAAhB;AACD;;AAED,aAAOD,UAAP;AACD;;;iCAEYO,W,EAAa;AAAA;;AAExB,UAAMC,SAAS,GAAG,KAAKtB,KAAL,CAAWO,UAAX,CAAsBM,KAAtB,EAAlB,CAFwB,CAIxB;;AACA,UAAMU,QAAQ,GAAG,KAAKjB,YAAL,EAAjB,CALwB,CAOxB;;AACA,UAAIL,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAvB;AACA,UAAIC,SAAS,GAAG,KAAKF,KAAL,CAAWE,SAA3B;;AAEA,UAAI,CAAC,KAAKF,KAAL,CAAWO,UAAX,CAAsBiB,QAAtB,CAA+BH,WAA/B,CAAL,EAAkD;AAChD;AACA,YAAIpB,KAAK,KAAKC,SAAd,EAAyB;AACvBD,UAAAA,KAAK;AACLC,UAAAA,SAAS,GAFc,CAIvB;AACD,SALD,MAKO;AACLD,UAAAA,KAAK;AACN,SAT+C,CAWhD;;;AACAqB,QAAAA,SAAS,CAACN,IAAV,CAAeK,WAAf;AACD,OAxBuB,CA0BxB;;;AACA,UAAI,KAAKrB,KAAL,CAAWO,UAAX,CAAsBiB,QAAtB,CAA+BH,WAA/B,CAAJ,EAAiD;AAC/C,YAAIpB,MAAK,GAAG,CAAZ;AACA,eAAO,KAAKwB,QAAL,CAAc;AACnBxB,UAAAA,KAAK,EAAEA,MADY;AAEnBC,UAAAA,SAAS,EAAEA,SAFQ;AAGnBC,UAAAA,WAAW,EAAE,WAHM;AAInBC,UAAAA,UAAU,EAAE,kBAJO;AAKnBC,UAAAA,UAAU,EAAEkB,QALO;AAMnBhB,UAAAA,UAAU,EAAE,EANO;AAOnBC,UAAAA,KAAK,EAAE;AAPY,SAAd,CAAP;AASD;;AAED,WAAKiB,QAAL,CAAc;AACZxB,QAAAA,KAAK,EAAEA,KADK;AAEZC,QAAAA,SAAS,EAAEA,SAFC;AAGZC,QAAAA,WAAW,EAAE,SAHD;AAIZC,QAAAA,UAAU,EAAE,wBAJA;AAKZC,QAAAA,UAAU,EAAEkB,QALA;AAMZhB,QAAAA,UAAU,EAAEe,SANA;AAOZd,QAAAA,KAAK,EAAE;AAPK,OAAd;AAUA,aAAOkB,UAAU,CAAC;AAAA,eAAM,MAAI,CAACD,QAAL,CAAc;AAAEtB,UAAAA,WAAW,EAAE;AAAf,SAAd,CAAN;AAAA,OAAD,EAA2C,GAA3C,CAAjB;AACD;;;6BAEQ;AACP,UAAMH,KAAK,GAAG,KAAKA,KAAnB;AACA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AACE,QAAA,KAAK,EAAEA,KAAK,CAACC,KADf;AAEE,QAAA,SAAS,EAAED,KAAK,CAACE,SAFnB;AAGE,QAAA,UAAU,EAAEF,KAAK,CAACI,UAHpB;AAIE,QAAA,WAAW,EAAEJ,KAAK,CAACG,WAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAOE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPF,EAQE,oBAAC,SAAD;AACE,QAAA,KAAK,EAAEH,KAAK,CAACQ,KADf;AAEE,QAAA,OAAO,EAAER,KAAK,CAACK,UAFjB;AAGE,QAAA,UAAU,EAAE,KAAKI,UAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARF,EAaE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAbF,CADF;AAiBD;;;;EArGsBhB,S;;AAwGzB,eAAeM,UAAf","sourcesContent":["import React, { Component } from 'react';\nimport Navbar from './Navbar';\nimport Container from './Container';\nimport Footer from './Footer';\nimport Banner from './Header';\nimport images from '../images';\n\nclass ClickyGame extends Component {\n  state = {\n    score: 0,\n    highScore: 0,\n\n    navMsgColor: '',\n    navMessage: 'Click an image to begin!',\n    allBeatles: this.shuffleArray(),\n    wasClicked: [],\n    shake: false\n  };\n\n  clickEvent = this.checkClicked.bind(this);\n\n  // used to shuffle the array of images when the DOM loads, and when an image is clicked\n  shuffleArray() {\n    // creates a copy of the current characters array to modify it by value, and not by reference\n    const newArr = images.slice();\n\n    // will store the shuffled array\n    const shuffleArr = [];\n\n    while (newArr.length > 0) {\n      shuffleArr.push(newArr.splice(Math.floor(Math.random() * newArr.length), 1)[0]);\n    }\n\n    return shuffleArr;\n  }\n\n  checkClicked(clickedElem) {\n   \n    const prevState = this.state.wasClicked.slice();\n\n    // shuffles the images\n    const shuffled = this.shuffleArray();\n\n    // tracks score\n    let score = this.state.score;\n    let highScore = this.state.highScore;\n\n    if (!this.state.wasClicked.includes(clickedElem)) {\n      // if score and highScore are the same, then there is a new highScore value\n      if (score === highScore) {\n        score++;\n        highScore++;\n\n        // if they are not equal, then only increase the score value\n      } else {\n        score++;\n      }\n\n      // adds the clicked item to wasClicked to track that it has been clicked\n      prevState.push(clickedElem);\n    }\n\n    // resets the current score if the same element was clicked twice\n    if (this.state.wasClicked.includes(clickedElem)) {\n      let score = 0;\n      return this.setState({\n        score: score,\n        highScore: highScore,\n        navMsgColor: 'incorrect',\n        navMessage: 'Incorrect guess!',\n        allBeatles: shuffled,\n        wasClicked: [],\n        shake: true\n      });\n    }\n\n    this.setState({\n      score: score,\n      highScore: highScore,\n      navMsgColor: 'correct',\n      navMessage: 'You Guessed Correctly!',\n      allBeatles: shuffled,\n      wasClicked: prevState,\n      shake: false\n    });\n\n    return setTimeout(() => this.setState({ navMsgColor: '' }), 500);\n  }\n\n  render() {\n    const state = this.state;\n    return (\n      <div>\n        <Navbar\n          score={state.score}\n          highScore={state.highScore}\n          navMessage={state.navMessage}\n          navMsgColor={state.navMsgColor}\n        />\n        <Banner />\n        <Container\n          shake={state.shake}\n          beatles={state.allBeatles}\n          clickEvent={this.clickEvent}\n        />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default ClickyGame;"]},"metadata":{},"sourceType":"module"}